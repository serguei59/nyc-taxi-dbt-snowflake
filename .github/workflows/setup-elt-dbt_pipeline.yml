name: Full ETL + dbt Pipeline

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:

jobs:

  # üèóÔ∏è Step 1: Snowflake Setup
  snowflake_setup:
    runs-on: ubuntu-latest
    env:
      # üü¢ Variables de configuration non sensibles (en clair)
      SNOWFLAKE_SQL_FILE: "extract/sql/cleaninstall.sql"
      SNOWFLAKE_WAREHOUSE: "NYC_TAXI_WH_V2"
      SNOWFLAKE_ROLE: "TRANSFORM"
      SNOWFLAKE_DATABASE: "NYC_TAXI_DB_V2"

      # üîí Secrets sensibles (inject√©s depuis GitHub Secrets)
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install snowflake-connector-python

      - name: Run Snowflake Setup Script
        run: |
          echo "üîπ Running Snowflake setup script..."
        
          # -----------------------------
          # 1Ô∏è‚É£ Pr√©parer le fichier de cl√© priv√©e
          # -----------------------------
          KEY_FILE=$(mktemp /tmp/snowflake_key.XXXXXX.p8)
          echo "$SNOWFLAKE_PRIVATE_KEY" > "$KEY_FILE"
          chmod 600 "$KEY_FILE"
          export SNOWFLAKE_PRIVATE_KEY_PATH="$KEY_FILE"
        
          # -----------------------------
          # 2Ô∏è‚É£ Activer options bash strictes pour logs et erreurs
          # -----------------------------
          set -o errexit   # Stoppe le workflow si une commande √©choue
          set -o pipefail  # Capture erreurs dans les pipes
          set -o nounset   # Erreur si variable non d√©finie
        
          # -----------------------------
          # 3Ô∏è‚É£ Ex√©cuter le script Python et g√©rer logs/erreurs
          # -----------------------------
          LOG_FILE=checks/logs/snowflake_setup.log
          mkdir -p checks/logs
        
          if python3 extract/run_snowflake_setup.py >> "$LOG_FILE" 2>&1; then
              echo "‚úÖ Snowflake setup script completed successfully."
          else
              echo "‚ùå Snowflake setup script failed! See $LOG_FILE for details."
              cat "$LOG_FILE"
              rm -f "$KEY_FILE"
              exit 1
          fi
        
          # -----------------------------
          # 4Ô∏è‚É£ Nettoyage fichier cl√©
          # -----------------------------
          rm -f "$KEY_FILE"
        shell: bash
        env:
          SNOWFLAKE_SQL_FILE: extract/sql/cleaninstall.sql
          SNOWFLAKE_WAREHOUSE: NYC_TAXI_WH_V2
          SNOWFLAKE_ROLE: TRANSFORM
          SNOWFLAKE_DATABASE: NYC_TAXI_DB_V2
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
        
      
         
  # üöÄ Step 2: Python ETL
  python_etl:
    name: Run Python ETL (Download + Ingest)
    runs-on: ubuntu-latest
    needs: snowflake_setup
    env:
      SNOWFLAKE_USER: DBT
      SNOWFLAKE_PASSWORD: ${{ secrets.DBT_PASSWORD }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_ROLE: TRANSFORM

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure data & logs folders exist
        run: |
          mkdir -p extract/data
          mkdir -p checks/logs

      - name: Pre-ingestion checks
        run: |
          echo "üü¢ Running pre-ingestion checks..."
          python checks/pre_ingestion_check.py >> checks/logs/pre_ingestion_check.log 2>&1 \
            || { echo "‚ùå Pre-ingestion checks failed. See checks/logs/pre_ingestion_check.log"; exit 1; }

      - name: Download Parquet files
        run: |
          echo "üü¢ Downloading Parquet files..."
          python extract/download_parquet.py >> checks/logs/download_parquet.log 2>&1 \
            || { echo "‚ùå Parquet download failed. See checks/logs/download_parquet.log"; exit 1; }

      - name: Ingest to Snowflake
        run: |
          echo "üü¢ Running merge_dynamic ingestion..."
          python load/merge_dynamic.py >> checks/logs/merge_dynamic.log 2>&1 \
            || { echo "‚ùå ETL ingestion failed. See checks/logs/merge_dynamic.log"; exit 1; }

  # üß© Step 3: dbt Transformations & Docs
  dbt:
    name: Run dbt Pipeline
    runs-on: ubuntu-latest
    needs: python_etl
    env:
      DBT_PASSWORD: ${{ secrets.DBT_PASSWORD }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dbt and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt-snowflake dbt-core pandas snowflake-connector-python

      - name: Create dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cat <<EOF > ~/.dbt/profiles.yml
          nyc_taxi_dbt_snowflake:
            target: dev
            outputs:
              dev:
                type: snowflake
                user: DBT
                password: ${{ secrets.DBT_PASSWORD }}
                role: TRANSFORM
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                database: ${{ secrets.SNOWFLAKE_DATABASE }}
                schema: ${{ secrets.SNOWFLAKE_SCHEMA }}
                threads: 1
                client_session_keep_alive: False
          EOF

      - name: Run dbt
        working-directory: ./nyc_taxi_dbt_snowflake
        run: |
          set -e
          echo "üì¶ Installing dbt dependencies..."
          dbt deps --profiles-dir ~/.dbt

          echo "üíæ Refreshing dbt seeds..."
          dbt seed --full-refresh --profiles-dir ~/.dbt

          echo "‚öôÔ∏è Running dbt transformations..."
          dbt run --profiles-dir ~/.dbt

          echo "‚úÖ Running dbt tests..."
          dbt test --profiles-dir ~/.dbt

          echo "üìö Generating dbt docs..."
          dbt docs generate --profiles-dir ~/.dbt

          echo "üì¶ Saving dbt docs artifacts..."
          mkdir -p ../artifacts/dbt_docs
          cp -r target ../artifacts/dbt_docs

          echo "üìÇ Copying dbt docs to GitHub Pages folder..."
          mkdir -p ../../docs/dbt_docs
          cp -r target/* ../../docs/dbt_docs/

      - name: Commit & push dbt docs for GitHub Pages
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/dbt_docs
          git commit -m "Update dbt docs [ci skip]" || echo "No changes to commit"
          git push origin dev
