name: Full ETL + dbt Pipeline

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:

jobs:
  snowflake_setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.26-linux_x86_64.bash
          bash snowsql-1.2.26-linux_x86_64.bash

      - name: Run clean install script
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        run: |
          snowsql -a $SNOWFLAKE_ACCOUNT \
                  -u $SNOWFLAKE_USER \
                  -p $SNOWFLAKE_PASSWORD \
                  -r $SNOWFLAKE_ROLE \
                  -f ./extract/sql/clean_install_nyc_taxi_db_v2.sql
  # üöÄ √âtape 2 : ETL Python
  python_etl:
    name: Run Python ETL (Download + Ingest)
    runs-on: ubuntu-latest
    needs: snowflake_setup

    env:
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure log & data folders exist
        run: |
          mkdir -p logs
          mkdir -p extract/data
          mkdir -p verifications

      - name: Pre-ingestion checks
        run: python verifications/pre_ingestion_check.py
        env:
            SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
            SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
            SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        
      - name: Run Python ETL
        run: |
          python extract/download_parquet.py
          python load/merge_dynamic.py

      - name: Ingest reporting
        run: |
          python verifications/writer_report_xslx.py
          

  # üß© √âtape 3 : dbt transformations & tests
  dbt:
    name: Run dbt Pipeline
    runs-on: ubuntu-latest
    needs: python_etl  # attend la fin du job ETL

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dbt and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt-snowflake dbt-core pandas snowflake-connector-python

      - name: Create dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cat <<EOF > ~/.dbt/profiles.yml
          nyc_taxi_dbt_snowflake:
            target: dev
            outputs:
              dev:
                type: snowflake
                account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                user: ${{ secrets.SNOWFLAKE_USER }}
                password: ${{ secrets.SNOWFLAKE_PASSWORD }}
                role: TRANSFORM
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                database: ${{ secrets.SNOWFLAKE_DATABASE }}
                schema: ${{ secrets.SNOWFLAKE_SCHEMA }}
                threads: 1
                client_session_keep_alive: False
          EOF

      - name: Run dbt
        working-directory: ./nyc_taxi_dbt_snowflake
        run: |
          # üì¶ T√©l√©charge les d√©pendances dbt
          dbt deps --profiles-dir ~/.dbt

          # üíæ Recharge les seeds si pr√©sents
          dbt seed --full-refresh --profiles-dir ~/.dbt

          # ‚öôÔ∏è Ex√©cute toutes les transformations (models)
          dbt run --profiles-dir ~/.dbt

          # ‚úÖ Lance les tests de qualit√©
          dbt test --profiles-dir ~/.dbt

          # üìö G√©n√®re la documentation dbt
          dbt docs generate --profiles-dir ~/.dbt

          # üì¶ Sauvegarde les fichiers de documentation comme artefacts
          mkdir -p ../artifacts/dbt_docs
          cp -r target ../artifacts/dbt_docs
