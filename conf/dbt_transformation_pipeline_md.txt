# üß± Transformation Pipeline ‚Äì NYC Taxi Data (dbt + Snowflake)

## üéØ Objectif de la section
Cette partie du projet a pour objectif de construire la **cha√Æne de transformation et de mod√©lisation des donn√©es** dans Snowflake √† l‚Äôaide de **dbt Core**, conform√©ment aux exigences du brief Data Engineering Simplon.

L‚Äôapproche suit la logique d‚Äôun pipeline industriel :
```
RAW (brut) ‚Üí STAGING (nettoy√© & enrichi) ‚Üí FINAL (analytique)
```

---

## ‚öôÔ∏è Contexte technique

### üî∏ Technologies
- **Snowflake** : Data Warehouse Cloud pour le stockage et les calculs.
- **dbt Core** : outil de transformation de donn√©es SQL as code.
- **Python (merge_dynamic.py)** : ingestion initiale vers le sch√©ma RAW.
- **dbt tests + docs** : validation et documentation automatis√©es.

### üî∏ Architecture globale
| Niveau | Description | Exemple de table |
|--------|--------------|------------------|
| **RAW** | Donn√©es brutes import√©es depuis les fichiers Parquet | `RAW.YELLOW_TAXI_TRIPS` |
| **STAGING** | Donn√©es nettoy√©es et enrichies | `STAGING.STG__CLEAN_TRIPS` |
| **FINAL** | Tables agr√©g√©es pr√™tes √† l‚Äôanalyse | `FINAL.FCT__DAILY_SUMMARY`, `FINAL.FCT__ZONE_ANALYSIS`, `FINAL.FCT__HOURLY_PATTERNS` |

---

## üß© Mod√©lisation dans dbt

### üóÇÔ∏è 1. Source de donn√©es : `raw__sources.yml`

D√©claration de la source brute utilis√©e pour les transformations.

```yaml
version: 2

sources:
  - name: RAW
    schema: RAW
    description: "Tables brutes import√©es dans Snowflake depuis les fichiers Parquet"
    tables:
      - name: YELLOW_TAXI_TRIPS
        description: "Donn√©es NYC Taxi 2024‚Äì2025 charg√©es via le script Python d‚Äôingestion"
```

---

### üßπ 2. Mod√®le STAGING : `stg__clean_trips.sql`

Ce mod√®le nettoie, filtre et enrichit les donn√©es selon les exigences du brief.

```sql
{{ config(materialized='table', schema='STAGING') }}

WITH source AS (
    SELECT * FROM {{ source('RAW', 'YELLOW_TAXI_TRIPS') }}
),

cleaned AS (
    SELECT
        VENDORID,
        TPEP_PICKUP_DATETIME,
        TPEP_DROPOFF_DATETIME,
        DATEDIFF('minute', TPEP_PICKUP_DATETIME, TPEP_DROPOFF_DATETIME) AS TRIP_DURATION_MIN,
        TRIP_DISTANCE,
        TOTAL_AMOUNT,
        TIP_AMOUNT,
        FARE_AMOUNT,
        ROUND((TIP_AMOUNT / NULLIF(FARE_AMOUNT, 0)) * 100, 2) AS TIP_PCT,
        PULOCATIONID,
        DOLOCATIONID,
        PASSENGER_COUNT,
        PAYMENT_TYPE,
        RATECODEID,
        MTA_TAX,
        EXTRA,
        TOLLS_AMOUNT,
        IMPROVEMENT_SURCHARGE,
        CONGESTION_SURCHARGE,
        AIRPORT_FEE,
        -- Dimensions temporelles
        DATE(TPEP_PICKUP_DATETIME) AS TRIP_DATE,
        HOUR(TPEP_PICKUP_DATETIME) AS PICKUP_HOUR,
        MONTH(TPEP_PICKUP_DATETIME) AS PICKUP_MONTH
    FROM source
    WHERE TOTAL_AMOUNT >= 0
      AND TRIP_DISTANCE BETWEEN 0.1 AND 100
      AND TPEP_DROPOFF_DATETIME > TPEP_PICKUP_DATETIME
      AND PULOCATIONID IS NOT NULL
      AND DOLOCATIONID IS NOT NULL
)

SELECT * FROM cleaned
```

---

### üìÜ 3. Mod√®le FINAL #1 : `fct__daily_summary.sql`

```sql
{{ config(materialized='table', schema='FINAL') }}

SELECT
    TRIP_DATE,
    COUNT(*) AS TOTAL_TRIPS,
    ROUND(AVG(TRIP_DISTANCE), 2) AS AVG_DISTANCE,
    ROUND(SUM(TOTAL_AMOUNT), 2) AS TOTAL_REVENUE,
    ROUND(AVG(TIP_PCT), 2) AS AVG_TIP_PCT,
    ROUND(AVG(TRIP_DURATION_MIN), 2) AS AVG_DURATION_MIN
FROM {{ ref('stg__clean_trips') }}
GROUP BY TRIP_DATE
ORDER BY TRIP_DATE
```

---

### üó∫Ô∏è 4. Mod√®le FINAL #2 : `fct__zone_analysis.sql`

```sql
{{ config(materialized='table', schema='FINAL') }}

SELECT
    PULOCATIONID AS PICKUP_ZONE,
    COUNT(*) AS TOTAL_TRIPS,
    ROUND(AVG(TOTAL_AMOUNT), 2) AS AVG_REVENUE,
    ROUND(AVG(TRIP_DISTANCE), 2) AS AVG_DISTANCE,
    ROUND(AVG(TRIP_DURATION_MIN), 2) AS AVG_DURATION,
    ROUND(AVG(TIP_PCT), 2) AS AVG_TIP_PCT
FROM {{ ref('stg__clean_trips') }}
GROUP BY PULOCATIONID
ORDER BY TOTAL_TRIPS DESC
```

---

### üïí 5. Mod√®le FINAL #3 : `fct__hourly_patterns.sql`

```sql
{{ config(materialized='table', schema='FINAL') }}

SELECT
    PICKUP_HOUR,
    COUNT(*) AS TOTAL_TRIPS,
    ROUND(SUM(TOTAL_AMOUNT), 2) AS TOTAL_REVENUE,
    ROUND(AVG(TRIP_DISTANCE), 2) AS AVG_DISTANCE,
    ROUND(AVG(TRIP_DURATION_MIN), 2) AS AVG_DURATION_MIN,
    ROUND(AVG(TIP_PCT), 2) AS AVG_TIP_PCT
FROM {{ ref('stg__clean_trips') }}
GROUP BY PICKUP_HOUR
ORDER BY PICKUP_HOUR
```

---

### üß™ 6. Tests de qualit√© (`schema.yml`)

```yaml
version: 2

models:
  - name: stg__clean_trips
    columns:
      - name: TRIP_DISTANCE
        tests:
          - not_null
          - accepted_range:
              min_value: 0
              max_value: 100
      - name: TOTAL_AMOUNT
        tests:
          - not_null
          - accepted_range:
              min_value: 0
      - name: PULOCATIONID
        tests: [not_null]
      - name: DOLOCATIONID
        tests: [not_null]

  - name: fct__daily_summary
    columns:
      - name: TRIP_DATE
        tests: [not_null]

  - name: fct__zone_analysis
    columns:
      - name: PICKUP_ZONE
        tests: [not_null]

  - name: fct__hourly_patterns
    columns:
      - name: PICKUP_HOUR
        tests: [not_null]
```

---

## üß† Validation et ex√©cution

```bash
dbt debug
dbt run
dbt test
dbt docs generate
dbt docs serve
```

---

## ‚úÖ Conformit√© au brief

| Exigence | Mod√®le/Fichier | Statut |
|-----------|----------------|--------|
| Nettoyage complet | `stg__clean_trips.sql` | ‚úÖ |
| Enrichissement temporel & pourboire | `stg__clean_trips.sql` | ‚úÖ |
| Table journali√®re | `fct__daily_summary.sql` | ‚úÖ |
| Table par zone | `fct__zone_analysis.sql` | ‚úÖ |
| Table horaire | `fct__hourly_patterns.sql` | ‚úÖ |
| Tests qualit√© & doc | `schema.yml` + `dbt docs` | ‚úÖ |
| Architecture 3-niveaux | RAW ‚Üí STAGING ‚Üí FINAL | ‚úÖ |
